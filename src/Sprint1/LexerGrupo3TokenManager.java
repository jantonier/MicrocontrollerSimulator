package Sprint1;
/* Generated By:JavaCC: Do not edit this line. LexerGrupo3TokenManager.java */

/** Token Manager. */
public class LexerGrupo3TokenManager implements LexerGrupo3Constants
{

    /** Debug output. */
    public static  java.io.PrintStream debugStream = System.out;
    /** Set debug output. */
    public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
    private static final int jjStopStringLiteralDfa_0(int pos, long active0)
    {
        switch (pos)
        {
            case 0:
                if ((active0 & 0xc90001500L) != 0L)
                {
                    jjmatchedKind = 39;
                    return 23;
                }
                if ((active0 & 0x100180000L) != 0L)
                {
                    jjmatchedKind = 45;
                    return 4;
                }
                if ((active0 & 0x26fe7eafeL) != 0L)
                {
                    jjmatchedKind = 45;
                    return 24;
                }
                return -1;
            case 1:
                if ((active0 & 0x80000500L) != 0L)
                {
                    if (jjmatchedPos != 1)
                    {
                        jjmatchedKind = 39;
                        jjmatchedPos = 1;
                    }
                    return 23;
                }
                if ((active0 & 0x400000000L) != 0L)
                    return 23;
                if ((active0 & 0x96fffdafeL) != 0L)
                {
                    if (jjmatchedPos != 1)
                    {
                        jjmatchedKind = 45;
                        jjmatchedPos = 1;
                    }
                    return 24;
                }
                if ((active0 & 0x210002000L) != 0L)
                    return 24;
                return -1;
            case 2:
                if ((active0 & 0x500L) != 0L)
                    return 23;
                if ((active0 & 0x26c01da08L) != 0L)
                    return 24;
                if ((active0 & 0x983fe00f6L) != 0L)
                {
                    if (jjmatchedPos != 2)
                    {
                        jjmatchedKind = 45;
                        jjmatchedPos = 2;
                    }
                    return 24;
                }
                return -1;
            case 3:
                if ((active0 & 0x909fe0c90L) != 0L)
                {
                    if (jjmatchedPos != 3)
                    {
                        jjmatchedKind = 45;
                        jjmatchedPos = 3;
                    }
                    return 24;
                }
                if ((active0 & 0x82000066L) != 0L)
                    return 24;
                return -1;
            case 4:
                if ((active0 & 0x808180c90L) != 0L)
                    return 24;
                if ((active0 & 0x101e60044L) != 0L)
                {
                    if (jjmatchedPos != 4)
                    {
                        jjmatchedKind = 45;
                        jjmatchedPos = 4;
                    }
                    return 24;
                }
                return -1;
            case 5:
                if ((active0 & 0x100060004L) != 0L)
                    return 24;
                if ((active0 & 0x1e000c0L) != 0L)
                {
                    jjmatchedKind = 45;
                    jjmatchedPos = 5;
                    return 24;
                }
                return -1;
            case 6:
                if ((active0 & 0x600000L) != 0L)
                    return 24;
                if ((active0 & 0x18000c0L) != 0L)
                {
                    jjmatchedKind = 45;
                    jjmatchedPos = 6;
                    return 24;
                }
                return -1;
            case 7:
                if ((active0 & 0x800040L) != 0L)
                    return 24;
                if ((active0 & 0x1000080L) != 0L)
                {
                    jjmatchedKind = 45;
                    jjmatchedPos = 7;
                    return 24;
                }
                return -1;
            default :
                return -1;
        }
    }
    private static final int jjStartNfa_0(int pos, long active0)
    {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }
    static private int jjStopAtPos(int pos, int kind)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }
    static private int jjMoveStringLiteralDfa0_0()
    {
        switch(curChar)
        {
            case 44:
                return jjStopAtPos(0, 37);
            case 65:
                return jjMoveStringLiteralDfa1_0(0x1500L);
            case 67:
                return jjMoveStringLiteralDfa1_0(0x880000000L);
            case 68:
                return jjMoveStringLiteralDfa1_0(0x400000000L);
            case 69:
                return jjMoveStringLiteralDfa1_0(0x10000000L);
            case 71:
                return jjMoveStringLiteralDfa1_0(0xc000000L);
            case 74:
                return jjMoveStringLiteralDfa1_0(0x1e00000L);
            case 76:
                return jjMoveStringLiteralDfa1_0(0x2000046L);
            case 78:
                return jjMoveStringLiteralDfa1_0(0x60018000L);
            case 79:
                return jjMoveStringLiteralDfa1_0(0x200002000L);
            case 80:
                return jjMoveStringLiteralDfa1_0(0x28L);
            case 82:
                return jjMoveStringLiteralDfa1_0(0x100180000L);
            case 83:
                return jjMoveStringLiteralDfa1_0(0x60a90L);
            case 88:
                return jjMoveStringLiteralDfa1_0(0x4000L);
            default :
                return jjMoveNfa_0(0, 0);
        }
    }
    static private int jjMoveStringLiteralDfa1_0(long active0)
    {
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch(curChar)
        {
            case 65:
                return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
            case 66:
                if ((active0 & 0x400000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 34, 23);
                break;
            case 67:
                return jjMoveStringLiteralDfa2_0(active0, 0x1800000L);
            case 68:
                return jjMoveStringLiteralDfa2_0(active0, 0x500L);
            case 69:
                return jjMoveStringLiteralDfa2_0(active0, 0x120010000L);
            case 72:
                return jjMoveStringLiteralDfa2_0(active0, 0x60000L);
            case 77:
                return jjMoveStringLiteralDfa2_0(active0, 0x600000L);
            case 78:
                return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
            case 79:
                return jjMoveStringLiteralDfa2_0(active0, 0x84218c04eL);
            case 81:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_0(1, 28, 24);
                break;
            case 82:
                if ((active0 & 0x2000L) != 0L)
                {
                    jjmatchedKind = 13;
                    jjmatchedPos = 1;
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x20c000000L);
            case 84:
                return jjMoveStringLiteralDfa2_0(active0, 0x90L);
            case 85:
                return jjMoveStringLiteralDfa2_0(active0, 0xa20L);
            default :
                break;
        }
        return jjStartNfa_0(0, active0);
    }
    static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch(curChar)
        {
            case 65:
                return jjMoveStringLiteralDfa3_0(active0, 0x46L);
            case 66:
                if ((active0 & 0x200L) != 0L)
                {
                    jjmatchedKind = 9;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x800L);
            case 68:
                if ((active0 & 0x100L) != 0L)
                {
                    jjmatchedKind = 8;
                    jjmatchedPos = 2;
                }
                else if ((active0 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(2, 12, 24);
                return jjMoveStringLiteralDfa3_0(active0, 0x400L);
            case 71:
                if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(2, 16, 24);
                else if ((active0 & 0x200000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 33, 24);
                break;
            case 73:
                return jjMoveStringLiteralDfa3_0(active0, 0x60000L);
            case 76:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
            case 78:
                return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
            case 79:
                return jjMoveStringLiteralDfa3_0(active0, 0x3800090L);
            case 80:
                if ((active0 & 0x8L) != 0L)
                    return jjStartNfaWithStates_0(2, 3, 24);
                else if ((active0 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 30, 24);
                return jjMoveStringLiteralDfa3_0(active0, 0x600000L);
            case 81:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStartNfaWithStates_0(2, 29, 24);
                break;
            case 82:
                if ((active0 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(2, 14, 24);
                break;
            case 83:
                return jjMoveStringLiteralDfa3_0(active0, 0x20L);
            case 84:
                if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(2, 15, 24);
                else if ((active0 & 0x4000000L) != 0L)
                {
                    jjmatchedKind = 26;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x108180000L);
            default :
                break;
        }
        return jjStartNfa_0(1, active0);
    }
    static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch(curChar)
        {
            case 65:
                return jjMoveStringLiteralDfa4_0(active0, 0x580000L);
            case 68:
                if ((active0 & 0x2L) != 0L)
                {
                    jjmatchedKind = 1;
                    jjmatchedPos = 3;
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x44L);
            case 69:
                return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
            case 70:
                return jjMoveStringLiteralDfa4_0(active0, 0x60000L);
            case 72:
                if ((active0 & 0x20L) != 0L)
                    return jjStartNfaWithStates_0(3, 5, 24);
                break;
            case 73:
                return jjMoveStringLiteralDfa4_0(active0, 0xc00L);
            case 76:
                if ((active0 & 0x80000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 31, 24);
                break;
            case 78:
                return jjMoveStringLiteralDfa4_0(active0, 0x1800000L);
            case 80:
                if ((active0 & 0x2000000L) != 0L)
                    return jjStartNfaWithStates_0(3, 25, 24);
                break;
            case 82:
                return jjMoveStringLiteralDfa4_0(active0, 0x200090L);
            case 83:
                return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
            case 85:
                return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
            default :
                break;
        }
        return jjStartNfa_0(2, active0);
    }
    static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch(curChar)
        {
            case 68:
                return jjMoveStringLiteralDfa5_0(active0, 0x1c00000L);
            case 69:
                if ((active0 & 0x10L) != 0L)
                {
                    jjmatchedKind = 4;
                    jjmatchedPos = 4;
                }
                return jjMoveStringLiteralDfa5_0(active0, 0x80L);
            case 73:
                return jjMoveStringLiteralDfa5_0(active0, 0x200004L);
            case 76:
                if ((active0 & 0x100000L) != 0L)
                    return jjStartNfaWithStates_0(4, 20, 24);
                break;
            case 77:
                if ((active0 & 0x400L) != 0L)
                    return jjStartNfaWithStates_0(4, 10, 24);
                else if ((active0 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(4, 11, 24);
                break;
            case 81:
                if ((active0 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 27, 24);
                break;
            case 82:
                if ((active0 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(4, 19, 24);
                return jjMoveStringLiteralDfa5_0(active0, 0x100000040L);
            case 84:
                if ((active0 & 0x800000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 35, 24);
                return jjMoveStringLiteralDfa5_0(active0, 0x60000L);
            default :
                break;
        }
        return jjStartNfa_0(3, active0);
    }
    static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(3, old0);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch(curChar)
        {
            case 65:
                return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
            case 68:
                return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
            case 73:
                return jjMoveStringLiteralDfa6_0(active0, 0x40L);
            case 76:
                if ((active0 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(5, 18, 24);
                break;
            case 77:
                if ((active0 & 0x4L) != 0L)
                    return jjStartNfaWithStates_0(5, 2, 24);
                break;
            case 78:
                if ((active0 & 0x100000000L) != 0L)
                    return jjStartNfaWithStates_0(5, 32, 24);
                return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
            case 82:
                if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(5, 17, 24);
                return jjMoveStringLiteralDfa6_0(active0, 0x800080L);
            default :
                break;
        }
        return jjStartNfa_0(4, active0);
    }
    static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(4, old0);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch(curChar)
        {
            case 68:
                if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(6, 21, 24);
                return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
            case 73:
                return jjMoveStringLiteralDfa7_0(active0, 0x800080L);
            case 78:
                return jjMoveStringLiteralDfa7_0(active0, 0x40L);
            case 82:
                if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(6, 22, 24);
                break;
            default :
                break;
        }
        return jjStartNfa_0(5, active0);
    }
    static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(5, old0);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0);
            return 7;
        }
        switch(curChar)
        {
            case 68:
                if ((active0 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(7, 6, 24);
                return jjMoveStringLiteralDfa8_0(active0, 0x1000000L);
            case 78:
                if ((active0 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(7, 23, 24);
                return jjMoveStringLiteralDfa8_0(active0, 0x80L);
            default :
                break;
        }
        return jjStartNfa_0(6, active0);
    }
    static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
    {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(6, old0);
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0);
            return 8;
        }
        switch(curChar)
        {
            case 68:
                if ((active0 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(8, 7, 24);
                break;
            case 82:
                if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(8, 24, 24);
                break;
            default :
                break;
        }
        return jjStartNfa_0(7, active0);
    }
    static private int jjStartNfaWithStates_0(int pos, int kind, int state)
    {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try { curChar = input_stream.readChar(); }
        catch(java.io.IOException e) { return pos + 1; }
        return jjMoveNfa_0(state, pos + 1);
    }
    static final long[] jjbitVec0 = {
            0x0L, 0x0L, 0x0L, 0x8L
    };
    static final long[] jjbitVec1 = {
            0x0L, 0x0L, 0x0L, 0x200000000000L
    };
    static final long[] jjbitVec2 = {
            0x0L, 0x0L, 0x0L, 0x140a2202040a2202L
    };
    static private int jjMoveNfa_0(int startState, int curPos)
    {
        int startsAt = 0;
        jjnewStateCnt = 23;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;)
        {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64)
            {
                long l = 1L << curChar;
                do
                {
                    switch(jjstateSet[--i])
                    {
                        case 24:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(19);
                            }
                            else if (curChar == 58)
                            {
                                if (kind > 38)
                                    kind = 38;
                            }
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(19);
                            }
                            else if (curChar == 58)
                            {
                                if (kind > 38)
                                    kind = 38;
                            }
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            if ((0xff000000000000L & l) != 0L)
                            {
                                if (kind > 44)
                                    kind = 44;
                            }
                            break;
                        case 23:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(19);
                            }
                            else if (curChar == 58)
                            {
                                if (kind > 38)
                                    kind = 38;
                            }
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                if (kind > 39)
                                    kind = 39;
                                jjCheckNAdd(20);
                            }
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 0:
                            if ((0xf800fbba00000000L & l) != 0L)
                            {
                                if (kind > 50)
                                    kind = 50;
                            }
                            else if ((0x3ff000000000000L & l) != 0L)
                            {
                                if (kind > 39)
                                    kind = 39;
                                jjCheckNAdd(20);
                            }
                            else if (curChar == 32)
                            {
                                if (kind > 41)
                                    kind = 41;
                                jjCheckNAdd(22);
                            }
                            else if (curChar == 9)
                            {
                                if (kind > 42)
                                    kind = 42;
                            }
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                if (kind > 46)
                                    kind = 46;
                            }
                            else if (curChar == 35)
                                jjCheckNAddTwoStates(12, 13);
                            else if (curChar == 47)
                                jjstateSet[jjnewStateCnt++] = 1;
                            if ((0xff000000000000L & l) != 0L)
                            {
                                if (kind > 48)
                                    kind = 48;
                            }
                            break;
                        case 1:
                            if (curChar == 47 && kind > 36)
                                kind = 36;
                            break;
                        case 2:
                            if (curChar == 9)
                                kind = 42;
                            break;
                        case 5:
                            if ((0x3ff000000000000L & l) != 0L && kind > 46)
                                kind = 46;
                            break;
                        case 6:
                            if ((0xff000000000000L & l) != 0L && kind > 48)
                                kind = 48;
                            break;
                        case 7:
                            if ((0xf800fbba00000000L & l) != 0L && kind > 50)
                                kind = 50;
                            break;
                        case 11:
                            if (curChar == 35)
                                jjCheckNAddTwoStates(12, 13);
                            break;
                        case 12:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAdd(12);
                            break;
                        case 13:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAdd(14);
                            break;
                        case 14:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAddTwoStates(15, 14);
                            break;
                        case 15:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAdd(15);
                            break;
                        case 17:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 18:
                            if (curChar == 58)
                                kind = 38;
                            break;
                        case 19:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 45)
                                kind = 45;
                            jjCheckNAdd(19);
                            break;
                        case 20:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                            jjCheckNAdd(20);
                            break;
                        case 21:
                            if (curChar != 32)
                                break;
                            if (kind > 41)
                                kind = 41;
                            jjCheckNAdd(22);
                            break;
                        case 22:
                            if (curChar != 32)
                                break;
                            if (kind > 40)
                                kind = 40;
                            jjCheckNAdd(22);
                            break;
                        default : break;
                    }
                } while(i != startsAt);
            }
            else if (curChar < 128)
            {
                long l = 1L << (curChar & 077);
                do
                {
                    switch(jjstateSet[--i])
                    {
                        case 24:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                            {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(19);
                            }
                            if ((0x7fffffe07fffffeL & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 4:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                            {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(19);
                            }
                            if ((0x7fffffe07fffffeL & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 23:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                            {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAdd(19);
                            }
                            if ((0x7fffffe07fffffeL & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            if ((0x7e0000007eL & l) != 0L)
                            {
                                if (kind > 39)
                                    kind = 39;
                                jjCheckNAdd(20);
                            }
                            break;
                        case 0:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                            {
                                if (kind > 45)
                                    kind = 45;
                                jjCheckNAddStates(0, 2);
                            }
                            else if ((0x58000000a8000001L & l) != 0L)
                            {
                                if (kind > 50)
                                    kind = 50;
                            }
                            else if (curChar == 125)
                                jjstateSet[jjnewStateCnt++] = 9;
                            if ((0x7e0000007eL & l) != 0L)
                            {
                                if (kind > 39)
                                    kind = 39;
                                jjCheckNAdd(20);
                            }
                            else if ((0x4000000040000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 3:
                            if ((0x4000000040000L & l) != 0L)
                                jjstateSet[jjnewStateCnt++] = 4;
                            break;
                        case 7:
                            if ((0x58000000a8000001L & l) != 0L)
                                kind = 50;
                            break;
                        case 8:
                            if (curChar == 125)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 12:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjstateSet[jjnewStateCnt++] = 12;
                            break;
                        case 13:
                            if ((0x7e0000007eL & l) != 0L)
                                jjCheckNAdd(14);
                            break;
                        case 14:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAddTwoStates(15, 14);
                            break;
                        case 15:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 43)
                                kind = 43;
                            jjCheckNAdd(15);
                            break;
                        case 16:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 45)
                                kind = 45;
                            jjCheckNAddStates(0, 2);
                            break;
                        case 17:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 19:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > 45)
                                kind = 45;
                            jjCheckNAdd(19);
                            break;
                        case 20:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 39)
                                kind = 39;
                            jjCheckNAdd(20);
                            break;
                        default : break;
                    }
                } while(i != startsAt);
            }
            else
            {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do
                {
                    switch(jjstateSet[--i])
                    {
                        case 0:
                            if ((jjbitVec0[i2] & l2) != 0L)
                            {
                                if (kind > 50)
                                    kind = 50;
                            }
                            if ((jjbitVec2[i2] & l2) != 0L)
                            {
                                if (kind > 51)
                                    kind = 51;
                            }
                            break;
                        case 7:
                            if ((jjbitVec0[i2] & l2) != 0L && kind > 50)
                                kind = 50;
                            break;
                        case 9:
                            if ((jjbitVec1[i2] & l2) != 0L && kind > 50)
                                kind = 50;
                            break;
                        case 10:
                            if ((jjbitVec2[i2] & l2) != 0L && kind > 51)
                                kind = 51;
                            break;
                        default : break;
                    }
                } while(i != startsAt);
            }
            if (kind != 0x7fffffff)
            {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
                return curPos;
            try { curChar = input_stream.readChar(); }
            catch(java.io.IOException e) { return curPos; }
        }
    }
    static final int[] jjnextStates = {
            17, 18, 19,
    };

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = {
            "", "\114\117\101\104", "\114\117\101\104\111\115", "\120\117\120",
            "\123\124\117\122\105", "\120\125\123\110", "\114\117\101\104\122\111\116\104",
            "\123\124\117\122\105\122\111\116\104", "\101\104\104", "\123\125\102", "\101\104\104\111\115",
            "\123\125\102\111\115", "\101\116\104", "\117\122", "\130\117\122", "\116\117\124", "\116\105\107",
            "\123\110\111\106\124\122", "\123\110\111\106\124\114", "\122\117\124\101\122", "\122\117\124\101\114",
            "\112\115\120\122\111\116\104", "\112\115\120\101\104\104\122", "\112\103\117\116\104\122\111\116",
            "\112\103\117\116\104\101\104\104\122", "\114\117\117\120", "\107\122\124", "\107\122\124\105\121", "\105\121",
            "\116\105\121", "\116\117\120", "\103\101\114\114", "\122\105\124\125\122\116",
            "\117\122\107", "\104\102", "\103\117\116\123\124", null, "\54", null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, };

    /** Lexer state names. */
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    static protected SimpleCharStream input_stream;
    static private final int[] jjrounds = new int[23];
    static private final int[] jjstateSet = new int[46];
    static protected char curChar;
    /** Constructor. */
    public LexerGrupo3TokenManager(SimpleCharStream stream){
        if (input_stream != null)
            throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
        input_stream = stream;
    }

    /** Constructor. */
    public LexerGrupo3TokenManager(SimpleCharStream stream, int lexState){
        this(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */
    static public void ReInit(SimpleCharStream stream)
    {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }
    static private void ReInitRounds()
    {
        int i;
        jjround = 0x80000001;
        for (i = 23; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    static public void ReInit(SimpleCharStream stream, int lexState)
    {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    static public void SwitchTo(int lexState)
    {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    static protected Token jjFillToken()
    {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    /** Get the next Token. */
    public static Token getNextToken()
    {
        Token matchedToken;
        int curPos = 0;

        EOFLoop :
        for (;;)
        {
            try
            {
                curChar = input_stream.BeginToken();
            }
            catch(java.io.IOException e)
            {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff)
            {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                matchedToken = jjFillToken();
                return matchedToken;
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try { input_stream.readChar(); input_stream.backup(1); }
            catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                }
                else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    static private void jjCheckNAdd(int state)
    {
        if (jjrounds[state] != jjround)
        {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }
    static private void jjAddStates(int start, int end)
    {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }
    static private void jjCheckNAddTwoStates(int state1, int state2)
    {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    static private void jjCheckNAddStates(int start, int end)
    {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
