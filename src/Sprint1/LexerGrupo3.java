package Sprint1;
/* Generated By:JavaCC: Do not edit this line. LexerGrupo3.java */
public class LexerGrupo3 implements LexerGrupo3Constants {

    static final public int start() throws ParseException {
        wff();
        {if (true) return 0;}  // returns 0 on successful parse

        throw new Error("Missing return statement in function");
    }

    static final public void wff() throws ParseException {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPACE:
                jj_consume_token(SPACE);
                term();
                break;
            case LABEL:
                jj_consume_token(LABEL);
                label_1:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[0] = jj_gen;
                            break label_1;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_2:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[1] = jj_gen;
                                        break label_2;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[2] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[3] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                break;
            case LOAD:
            case LOADIM:
            case POP:
            case STORE:
            case PUSH:
            case LOADRIND:
            case STORERIND:
            case ADD:
            case SUB:
            case ADDIM:
            case SUBIM:
            case AND:
            case OR:
            case XOR:
            case NOT:
            case NEG:
            case SHIFTR:
            case SHIFTL:
            case ROTAR:
            case JMPRIND:
            case JMPADDR:
            case JCONDRIN:
            case JCONDADDR:
            case LOOP:
            case GRT:
            case GRTEQ:
            case EQ:
            case NEQ:
            case NOP:
            case CALL:
            case RETURN:
            case HEX:
            case VARIABLE:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case HEX:
                        jj_consume_token(HEX);
                        break;
                    case VARIABLE:
                        jj_consume_token(VARIABLE);
                        break;
                    case LOAD:
                        jj_consume_token(LOAD);
                        break;
                    case LOADIM:
                        jj_consume_token(LOADIM);
                        break;
                    case POP:
                        jj_consume_token(POP);
                        break;
                    case STORE:
                        jj_consume_token(STORE);
                        break;
                    case PUSH:
                        jj_consume_token(PUSH);
                        break;
                    case LOADRIND:
                        jj_consume_token(LOADRIND);
                        break;
                    case STORERIND:
                        jj_consume_token(STORERIND);
                        break;
                    case ADD:
                        jj_consume_token(ADD);
                        break;
                    case SUB:
                        jj_consume_token(SUB);
                        break;
                    case ADDIM:
                        jj_consume_token(ADDIM);
                        break;
                    case SUBIM:
                        jj_consume_token(SUBIM);
                        break;
                    case AND:
                        jj_consume_token(AND);
                        break;
                    case OR:
                        jj_consume_token(OR);
                        break;
                    case XOR:
                        jj_consume_token(XOR);
                        break;
                    case NOT:
                        jj_consume_token(NOT);
                        break;
                    case NEG:
                        jj_consume_token(NEG);
                        break;
                    case SHIFTR:
                        jj_consume_token(SHIFTR);
                        break;
                    case SHIFTL:
                        jj_consume_token(SHIFTL);
                        break;
                    case ROTAR:
                        jj_consume_token(ROTAR);
                        break;
                    case JMPRIND:
                        jj_consume_token(JMPRIND);
                        break;
                    case JMPADDR:
                        jj_consume_token(JMPADDR);
                        break;
                    case JCONDRIN:
                        jj_consume_token(JCONDRIN);
                        break;
                    case JCONDADDR:
                        jj_consume_token(JCONDADDR);
                        break;
                    case LOOP:
                        jj_consume_token(LOOP);
                        break;
                    case GRT:
                        jj_consume_token(GRT);
                        break;
                    case GRTEQ:
                        jj_consume_token(GRTEQ);
                        break;
                    case EQ:
                        jj_consume_token(EQ);
                        break;
                    case NEQ:
                        jj_consume_token(NEQ);
                        break;
                    case NOP:
                        jj_consume_token(NOP);
                        break;
                    case CALL:
                        jj_consume_token(CALL);
                        break;
                    case RETURN:
                        jj_consume_token(RETURN);
                        break;
                    default:
                        jj_la1[4] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    default:
                        jj_la1[5] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(DB);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    default:
                        jj_la1[6] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(HEX);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    case COMMA:
                        jj_consume_token(COMMA);
                        label_3:
                        while (true) {
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case MSPACE:
                                case SPACE:
                                    ;
                                    break;
                                default:
                                    jj_la1[7] = jj_gen;
                                    break label_3;
                            }
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                default:
                                    jj_la1[8] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                        }
                        jj_consume_token(HEX);
                        break;
                    case 0:
                        morenum();
                        break;
                    default:
                        jj_la1[9] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            case SYMBOLS:
                jj_consume_token(SYMBOLS);
                break;
            case COMMENT:
                jj_consume_token(COMMENT);
                break;
            case CONST:
                jj_consume_token(CONST);
                label_4:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[10] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[11] = jj_gen;
                            break label_4;
                    }
                }
                label_5:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case VARIABLE:
                            jj_consume_token(VARIABLE);
                            break;
                        case HEX:
                            jj_consume_token(HEX);
                            break;
                        default:
                            jj_la1[12] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case HEX:
                        case VARIABLE:
                            ;
                            break;
                        default:
                            jj_la1[13] = jj_gen;
                            break label_5;
                    }
                }
                label_6:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[14] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[15] = jj_gen;
                            break label_6;
                    }
                }
                label_7:
                while (true) {
                    jj_consume_token(HEX);
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case HEX:
                            ;
                            break;
                        default:
                            jj_la1[16] = jj_gen;
                            break label_7;
                    }
                }
                label_8:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[17] = jj_gen;
                            break label_8;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_9:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[18] = jj_gen;
                                        break label_9;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[19] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[20] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                morenum();
                break;
            case MSPACE:
                jj_consume_token(MSPACE);
                jj_consume_token(ORG);
                label_10:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case TSPACE:
                            jj_consume_token(TSPACE);
                            break;
                        default:
                            jj_la1[21] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[22] = jj_gen;
                            break label_10;
                    }
                }
                label_11:
                while (true) {
                    jj_consume_token(HEX);
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case HEX:
                            ;
                            break;
                        default:
                            jj_la1[23] = jj_gen;
                            break label_11;
                    }
                }
                label_12:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[24] = jj_gen;
                            break label_12;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_13:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[25] = jj_gen;
                                        break label_13;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[26] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[27] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                morenum();
                break;
            default:
                jj_la1[28] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void term() throws ParseException {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ADD:
            case SUB:
            case AND:
            case OR:
            case XOR:
            case SHIFTR:
            case SHIFTL:
            case ROTAR:
            case ROTAL:
                F1();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    default:
                        jj_la1[29] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(REGISTER);
                label_14:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[30] = jj_gen;
                            break label_14;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[31] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(COMMA);
                label_15:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[32] = jj_gen;
                            break label_15;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[33] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(REGISTER);
                label_16:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[34] = jj_gen;
                            break label_16;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[35] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(COMMA);
                label_17:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[36] = jj_gen;
                            break label_17;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[37] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(REGISTER);
                label_18:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[38] = jj_gen;
                            break label_18;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                case TSPACE:
                                    jj_consume_token(TSPACE);
                                    break;
                                default:
                                    jj_la1[39] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_19:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[40] = jj_gen;
                                        break label_19;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case TSPACE:
                                        jj_consume_token(TSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[41] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[42] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(0);
                break;
            case LOADRIND:
            case STORERIND:
            case NOT:
            case NEG:
            case GRT:
            case GRTEQ:
            case EQ:
            case NEQ:
                F1_2();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    default:
                        jj_la1[43] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(REGISTER);
                label_20:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[44] = jj_gen;
                            break label_20;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[45] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(COMMA);
                label_21:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[46] = jj_gen;
                            break label_21;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[47] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(REGISTER);
                label_22:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[48] = jj_gen;
                            break label_22;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                case TSPACE:
                                    jj_consume_token(TSPACE);
                                    break;
                                default:
                                    jj_la1[49] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_23:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[50] = jj_gen;
                                        break label_23;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case TSPACE:
                                        jj_consume_token(TSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[51] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[52] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(0);
                break;
            case COMMENT:
            case SPACE:
            case TSPACE:
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case COMMENT:
                        jj_consume_token(COMMENT);
                        break;
                    case TSPACE:
                        jj_consume_token(TSPACE);
                        break;
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    default:
                        jj_la1[53] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            case JMPRIND:
                F1_1();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    default:
                        jj_la1[54] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(REGISTER);
                label_24:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[55] = jj_gen;
                            break label_24;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                case TSPACE:
                                    jj_consume_token(TSPACE);
                                    break;
                                default:
                                    jj_la1[56] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_25:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[57] = jj_gen;
                                        break label_25;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case TSPACE:
                                        jj_consume_token(TSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[58] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[59] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(0);
                break;
            case NOP:
            case RETURN:
                F1_0();
                label_26:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[60] = jj_gen;
                            break label_26;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                case TSPACE:
                                    jj_consume_token(TSPACE);
                                    break;
                                default:
                                    jj_la1[61] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_27:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[62] = jj_gen;
                                        break label_27;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case TSPACE:
                                        jj_consume_token(TSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[63] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[64] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(0);
                break;
            case LOAD:
            case LOADIM:
            case ADDIM:
            case SUBIM:
            case LOOP:
                F2();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    case TSPACE:
                        jj_consume_token(TSPACE);
                        break;
                    default:
                        jj_la1[65] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case REGISTER:
                        jj_consume_token(REGISTER);
                        break;
                    case VARIABLE:
                        jj_consume_token(VARIABLE);
                        break;
                    default:
                        jj_la1[66] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                label_28:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[67] = jj_gen;
                            break label_28;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[68] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(COMMA);
                label_29:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[69] = jj_gen;
                            break label_29;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[70] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case VARIABLE:
                        jj_consume_token(VARIABLE);
                        break;
                    case HEX:
                        jj_consume_token(HEX);
                        break;
                    case INMEDIATE:
                        jj_consume_token(INMEDIATE);
                        break;
                    case LOAD:
                        jj_consume_token(LOAD);
                        break;
                    case LOADIM:
                        jj_consume_token(LOADIM);
                        break;
                    case POP:
                        jj_consume_token(POP);
                        break;
                    case STORE:
                        jj_consume_token(STORE);
                        break;
                    case PUSH:
                        jj_consume_token(PUSH);
                        break;
                    case LOADRIND:
                        jj_consume_token(LOADRIND);
                        break;
                    case STORERIND:
                        jj_consume_token(STORERIND);
                        break;
                    case ADD:
                        jj_consume_token(ADD);
                        break;
                    case SUB:
                        jj_consume_token(SUB);
                        break;
                    case ADDIM:
                        jj_consume_token(ADDIM);
                        break;
                    case SUBIM:
                        jj_consume_token(SUBIM);
                        break;
                    case AND:
                        jj_consume_token(AND);
                        break;
                    case OR:
                        jj_consume_token(OR);
                        break;
                    case XOR:
                        jj_consume_token(XOR);
                        break;
                    case NOT:
                        jj_consume_token(NOT);
                        break;
                    case NEG:
                        jj_consume_token(NEG);
                        break;
                    case SHIFTR:
                        jj_consume_token(SHIFTR);
                        break;
                    case SHIFTL:
                        jj_consume_token(SHIFTL);
                        break;
                    case ROTAR:
                        jj_consume_token(ROTAR);
                        break;
                    case JMPRIND:
                        jj_consume_token(JMPRIND);
                        break;
                    case JMPADDR:
                        jj_consume_token(JMPADDR);
                        break;
                    case JCONDRIN:
                        jj_consume_token(JCONDRIN);
                        break;
                    case JCONDADDR:
                        jj_consume_token(JCONDADDR);
                        break;
                    case LOOP:
                        jj_consume_token(LOOP);
                        break;
                    case GRT:
                        jj_consume_token(GRT);
                        break;
                    case GRTEQ:
                        jj_consume_token(GRTEQ);
                        break;
                    case EQ:
                        jj_consume_token(EQ);
                        break;
                    case NEQ:
                        jj_consume_token(NEQ);
                        break;
                    case NOP:
                        jj_consume_token(NOP);
                        break;
                    case CALL:
                        jj_consume_token(CALL);
                        break;
                    case RETURN:
                        jj_consume_token(RETURN);
                        break;
                    default:
                        jj_la1[71] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                label_30:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[72] = jj_gen;
                            break label_30;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                case TSPACE:
                                    jj_consume_token(TSPACE);
                                    break;
                                default:
                                    jj_la1[73] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_31:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[74] = jj_gen;
                                        break label_31;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case TSPACE:
                                        jj_consume_token(TSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[75] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[76] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(0);
                break;
            case POP:
            case PUSH:
                F2_1();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    default:
                        jj_la1[77] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(REGISTER);
                label_32:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[78] = jj_gen;
                            break label_32;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                case TSPACE:
                                    jj_consume_token(TSPACE);
                                    break;
                                default:
                                    jj_la1[79] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_33:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[80] = jj_gen;
                                        break label_33;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case TSPACE:
                                        jj_consume_token(TSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[81] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[82] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(0);
                break;
            case STORE:
                F2_2();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    default:
                        jj_la1[83] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case VARIABLE:
                        jj_consume_token(VARIABLE);
                        break;
                    case INMEDIATE:
                        jj_consume_token(INMEDIATE);
                        break;
                    case LOAD:
                        jj_consume_token(LOAD);
                        break;
                    case LOADIM:
                        jj_consume_token(LOADIM);
                        break;
                    case POP:
                        jj_consume_token(POP);
                        break;
                    case STORE:
                        jj_consume_token(STORE);
                        break;
                    case PUSH:
                        jj_consume_token(PUSH);
                        break;
                    case LOADRIND:
                        jj_consume_token(LOADRIND);
                        break;
                    case STORERIND:
                        jj_consume_token(STORERIND);
                        break;
                    case ADD:
                        jj_consume_token(ADD);
                        break;
                    case SUB:
                        jj_consume_token(SUB);
                        break;
                    case ADDIM:
                        jj_consume_token(ADDIM);
                        break;
                    case SUBIM:
                        jj_consume_token(SUBIM);
                        break;
                    case AND:
                        jj_consume_token(AND);
                        break;
                    case OR:
                        jj_consume_token(OR);
                        break;
                    case XOR:
                        jj_consume_token(XOR);
                        break;
                    case NOT:
                        jj_consume_token(NOT);
                        break;
                    case NEG:
                        jj_consume_token(NEG);
                        break;
                    case SHIFTR:
                        jj_consume_token(SHIFTR);
                        break;
                    case SHIFTL:
                        jj_consume_token(SHIFTL);
                        break;
                    case ROTAR:
                        jj_consume_token(ROTAR);
                        break;
                    case JMPRIND:
                        jj_consume_token(JMPRIND);
                        break;
                    case JMPADDR:
                        jj_consume_token(JMPADDR);
                        break;
                    case JCONDRIN:
                        jj_consume_token(JCONDRIN);
                        break;
                    case JCONDADDR:
                        jj_consume_token(JCONDADDR);
                        break;
                    case LOOP:
                        jj_consume_token(LOOP);
                        break;
                    case GRT:
                        jj_consume_token(GRT);
                        break;
                    case GRTEQ:
                        jj_consume_token(GRTEQ);
                        break;
                    case EQ:
                        jj_consume_token(EQ);
                        break;
                    case NEQ:
                        jj_consume_token(NEQ);
                        break;
                    case NOP:
                        jj_consume_token(NOP);
                        break;
                    case CALL:
                        jj_consume_token(CALL);
                        break;
                    case RETURN:
                        jj_consume_token(RETURN);
                        break;
                    default:
                        jj_la1[84] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                label_34:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[85] = jj_gen;
                            break label_34;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[86] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(COMMA);
                label_35:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[87] = jj_gen;
                            break label_35;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        default:
                            jj_la1[88] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(REGISTER);
                label_36:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[89] = jj_gen;
                            break label_36;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                case TSPACE:
                                    jj_consume_token(TSPACE);
                                    break;
                                default:
                                    jj_la1[90] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_37:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[91] = jj_gen;
                                        break label_37;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case TSPACE:
                                        jj_consume_token(TSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[92] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[93] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(0);
                break;
            case JMPADDR:
            case JCONDADDR:
            case CALL:
                F3_0();
                jj_consume_token(SPACE);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case HEX:
                        jj_consume_token(HEX);
                        break;
                    case VARIABLE:
                        jj_consume_token(VARIABLE);
                        break;
                    case LOAD:
                        jj_consume_token(LOAD);
                        break;
                    case LOADIM:
                        jj_consume_token(LOADIM);
                        break;
                    case POP:
                        jj_consume_token(POP);
                        break;
                    case STORE:
                        jj_consume_token(STORE);
                        break;
                    case PUSH:
                        jj_consume_token(PUSH);
                        break;
                    case LOADRIND:
                        jj_consume_token(LOADRIND);
                        break;
                    case STORERIND:
                        jj_consume_token(STORERIND);
                        break;
                    case ADD:
                        jj_consume_token(ADD);
                        break;
                    case SUB:
                        jj_consume_token(SUB);
                        break;
                    case ADDIM:
                        jj_consume_token(ADDIM);
                        break;
                    case SUBIM:
                        jj_consume_token(SUBIM);
                        break;
                    case AND:
                        jj_consume_token(AND);
                        break;
                    case OR:
                        jj_consume_token(OR);
                        break;
                    case XOR:
                        jj_consume_token(XOR);
                        break;
                    case NOT:
                        jj_consume_token(NOT);
                        break;
                    case NEG:
                        jj_consume_token(NEG);
                        break;
                    case SHIFTR:
                        jj_consume_token(SHIFTR);
                        break;
                    case SHIFTL:
                        jj_consume_token(SHIFTL);
                        break;
                    case ROTAR:
                        jj_consume_token(ROTAR);
                        break;
                    case JMPRIND:
                        jj_consume_token(JMPRIND);
                        break;
                    case JMPADDR:
                        jj_consume_token(JMPADDR);
                        break;
                    case JCONDRIN:
                        jj_consume_token(JCONDRIN);
                        break;
                    case JCONDADDR:
                        jj_consume_token(JCONDADDR);
                        break;
                    case LOOP:
                        jj_consume_token(LOOP);
                        break;
                    case GRT:
                        jj_consume_token(GRT);
                        break;
                    case GRTEQ:
                        jj_consume_token(GRTEQ);
                        break;
                    case EQ:
                        jj_consume_token(EQ);
                        break;
                    case NEQ:
                        jj_consume_token(NEQ);
                        break;
                    case NOP:
                        jj_consume_token(NOP);
                        break;
                    case CALL:
                        jj_consume_token(CALL);
                        break;
                    case RETURN:
                        jj_consume_token(RETURN);
                        break;
                    default:
                        jj_la1[94] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                label_38:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[95] = jj_gen;
                            break label_38;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                case TSPACE:
                                    jj_consume_token(TSPACE);
                                    break;
                                default:
                                    jj_la1[96] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_39:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[97] = jj_gen;
                                        break label_39;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case TSPACE:
                                        jj_consume_token(TSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[98] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[99] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(0);
                break;
            case JCONDRIN:
                F3_1();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    default:
                        jj_la1[100] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                jj_consume_token(REGISTER);
                label_40:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                            ;
                            break;
                        default:
                            jj_la1[101] = jj_gen;
                            break label_40;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case SPACE:
                            jj_consume_token(SPACE);
                            break;
                        case MSPACE:
                            jj_consume_token(MSPACE);
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_41:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[102] = jj_gen;
                                        break label_41;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[103] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[104] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                jj_consume_token(0);
                break;
            case ORG:
                jj_consume_token(ORG);
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case MSPACE:
                        jj_consume_token(MSPACE);
                        break;
                    case SPACE:
                        jj_consume_token(SPACE);
                        break;
                    default:
                        jj_la1[105] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                label_42:
                while (true) {
                    jj_consume_token(HEX);
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case HEX:
                            ;
                            break;
                        default:
                            jj_la1[106] = jj_gen;
                            break label_42;
                    }
                }
                label_43:
                while (true) {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case COMMENT:
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            ;
                            break;
                        default:
                            jj_la1[107] = jj_gen;
                            break label_43;
                    }
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case MSPACE:
                        case SPACE:
                        case TSPACE:
                            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                case SPACE:
                                    jj_consume_token(SPACE);
                                    break;
                                case MSPACE:
                                    jj_consume_token(MSPACE);
                                    break;
                                case TSPACE:
                                    jj_consume_token(TSPACE);
                                    break;
                                default:
                                    jj_la1[108] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                            break;
                        case COMMENT:
                            jj_consume_token(COMMENT);
                            label_44:
                            while (true) {
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case MSPACE:
                                    case SPACE:
                                    case TSPACE:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        ;
                                        break;
                                    default:
                                        jj_la1[109] = jj_gen;
                                        break label_44;
                                }
                                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                                    case SPACE:
                                        jj_consume_token(SPACE);
                                        break;
                                    case MSPACE:
                                        jj_consume_token(MSPACE);
                                        break;
                                    case TSPACE:
                                        jj_consume_token(TSPACE);
                                        break;
                                    case LOAD:
                                    case LOADIM:
                                    case POP:
                                    case STORE:
                                    case PUSH:
                                    case LOADRIND:
                                    case STORERIND:
                                    case ADD:
                                    case SUB:
                                    case ADDIM:
                                    case SUBIM:
                                    case AND:
                                    case OR:
                                    case XOR:
                                    case NOT:
                                    case NEG:
                                    case SHIFTR:
                                    case SHIFTL:
                                    case ROTAR:
                                    case JMPRIND:
                                    case JMPADDR:
                                    case JCONDRIN:
                                    case JCONDADDR:
                                    case LOOP:
                                    case GRT:
                                    case GRTEQ:
                                    case EQ:
                                    case NEQ:
                                    case NOP:
                                    case CALL:
                                    case RETURN:
                                    case ORG:
                                    case DB:
                                    case CONST:
                                    case COMMENT:
                                    case COMMA:
                                    case HEX:
                                    case INMEDIATE:
                                    case REGISTER:
                                    case VARIABLE:
                                    case SYMBOLS:
                                    case ACENTOS:
                                        moreSentence();
                                        break;
                                    default:
                                        jj_la1[110] = jj_gen;
                                        jj_consume_token(-1);
                                        throw new ParseException();
                                }
                            }
                            break;
                        default:
                            jj_la1[111] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
                morenum();
                break;
            default:
                jj_la1[112] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void binary_operator() throws ParseException {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case REGISTER:
                jj_consume_token(REGISTER);
                break;
            case INMEDIATE:
                jj_consume_token(INMEDIATE);
                break;
            default:
                jj_la1[113] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void F1() throws ParseException {
        Token t;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ADD:
                t = jj_consume_token(ADD);
                System.out.println("ADD!");
                break;
            case SUB:
                t = jj_consume_token(SUB);
                System.out.println("SUB!");
                break;
            case AND:
                t = jj_consume_token(AND);
                System.out.println("AND!");
                break;
            case OR:
                t = jj_consume_token(OR);
                System.out.println("OR!");
                break;
            case XOR:
                t = jj_consume_token(XOR);
                System.out.println("XOR!");
                break;
            case SHIFTR:
                t = jj_consume_token(SHIFTR);
                System.out.println("SHIFTR!");
                break;
            case SHIFTL:
                t = jj_consume_token(SHIFTL);
                System.out.println("SHIFTL!");
                break;
            case ROTAR:
                t = jj_consume_token(ROTAR);
                System.out.println("ROTAR!");
                break;
            case ROTAL:
                t = jj_consume_token(ROTAL);
                System.out.println("ROTAL!");
                break;
            default:
                jj_la1[114] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void F1_2() throws ParseException {
        Token t;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LOADRIND:
                t = jj_consume_token(LOADRIND);
                System.out.println("LOADRIND!");
                break;
            case STORERIND:
                t = jj_consume_token(STORERIND);
                System.out.println("STORERIND!");
                break;
            case NOT:
                t = jj_consume_token(NOT);
                System.out.println("NOT!");
                break;
            case NEG:
                t = jj_consume_token(NEG);
                System.out.println("NEG!");
                break;
            case GRT:
                t = jj_consume_token(GRT);
                System.out.println("GRT!");
                break;
            case GRTEQ:
                t = jj_consume_token(GRTEQ);
                System.out.println("GRTEQ!");
                break;
            case EQ:
                t = jj_consume_token(EQ);
                System.out.println("EQ!");
                break;
            case NEQ:
                t = jj_consume_token(NEQ);
                System.out.println("NEQ!");
                break;
            default:
                jj_la1[115] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void F1_1() throws ParseException {
        Token t;
        t = jj_consume_token(JMPRIND);
        System.out.println("JMPRIND!");
    }

    static final public void F1_0() throws ParseException {
        Token t;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NOP:
                t = jj_consume_token(NOP);
                System.out.println("NOP!");
                break;
            case RETURN:
                t = jj_consume_token(RETURN);
                System.out.println("RETURN!");
                break;
            default:
                jj_la1[116] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void F2() throws ParseException {
        Token t;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LOAD:
                t = jj_consume_token(LOAD);
                System.out.println("LOAD!");
                break;
            case LOADIM:
                t = jj_consume_token(LOADIM);
                System.out.println("LOADIM!");
                break;
            case ADDIM:
                t = jj_consume_token(ADDIM);
                System.out.println("ADDIM!");
                break;
            case SUBIM:
                t = jj_consume_token(SUBIM);
                System.out.println("SUBIM!");
                break;
            case LOOP:
                t = jj_consume_token(LOOP);
                System.out.println("LOOP!");
                break;
            default:
                jj_la1[117] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void F2_1() throws ParseException {
        Token t;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case POP:
                t = jj_consume_token(POP);
                System.out.println("POP!");
                break;
            case PUSH:
                t = jj_consume_token(PUSH);
                System.out.println("LOADIM!");
                break;
            case ADDIM:
                t = jj_consume_token(ADDIM);
                System.out.println("ADDIM!");
                break;
            case SUBIM:
                t = jj_consume_token(SUBIM);
                System.out.println("SUBIM!");
                break;
            case LOOP:
                t = jj_consume_token(LOOP);
                System.out.println("LOOP!");
                break;
            default:
                jj_la1[118] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void F2_2() throws ParseException {
        Token t;
        t = jj_consume_token(STORE);
        System.out.println("STORE!");
    }

    static final public void F3_0() throws ParseException {
        Token t;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case JMPADDR:
                t = jj_consume_token(JMPADDR);
                System.out.println("JMPADDR!");
                break;
            case JCONDADDR:
                t = jj_consume_token(JCONDADDR);
                System.out.println("JCONDADDR!");
                break;
            case CALL:
                t = jj_consume_token(CALL);
                System.out.println("CALL!");
                break;
            default:
                jj_la1[119] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static final public void F3_1() throws ParseException {
        Token t;
        t = jj_consume_token(JCONDRIN);
        System.out.println("JCONDRIN!");
    }

    static final public void label() throws ParseException {
        Token t;
        label_45:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case SPACE:
                    ;
                    break;
                default:
                    jj_la1[120] = jj_gen;
                    break label_45;
            }
            jj_consume_token(SPACE);
        }
        term();
    }

    static final public void morenum() throws ParseException {
        Token t;
        jj_consume_token(0);
    }

    static final public void moreSentence() throws ParseException {
        Token t;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SPACE:
                t = jj_consume_token(SPACE);
                break;
            case MSPACE:
                jj_consume_token(MSPACE);
                break;
            case TSPACE:
                jj_consume_token(TSPACE);
                break;
            case VARIABLE:
                jj_consume_token(VARIABLE);
                break;
            case ACENTOS:
                jj_consume_token(ACENTOS);
                break;
            case ORG:
                jj_consume_token(ORG);
                break;
            case DB:
                jj_consume_token(DB);
                break;
            case CONST:
                jj_consume_token(CONST);
                break;
            case HEX:
                jj_consume_token(HEX);
                break;
            case INMEDIATE:
                jj_consume_token(INMEDIATE);
                break;
            case LOAD:
                jj_consume_token(LOAD);
                break;
            case LOADIM:
                jj_consume_token(LOADIM);
                break;
            case POP:
                jj_consume_token(POP);
                break;
            case STORE:
                jj_consume_token(STORE);
                break;
            case PUSH:
                jj_consume_token(PUSH);
                break;
            case LOADRIND:
                jj_consume_token(LOADRIND);
                break;
            case STORERIND:
                jj_consume_token(STORERIND);
                break;
            case ADD:
                jj_consume_token(ADD);
                break;
            case SUB:
                jj_consume_token(SUB);
                break;
            case ADDIM:
                jj_consume_token(ADDIM);
                break;
            case SUBIM:
                jj_consume_token(SUBIM);
                break;
            case AND:
                jj_consume_token(AND);
                break;
            case OR:
                jj_consume_token(OR);
                break;
            case XOR:
                jj_consume_token(XOR);
                break;
            case NOT:
                jj_consume_token(NOT);
                break;
            case NEG:
                jj_consume_token(NEG);
                break;
            case SHIFTR:
                jj_consume_token(SHIFTR);
                break;
            case SHIFTL:
                jj_consume_token(SHIFTL);
                break;
            case ROTAR:
                jj_consume_token(ROTAR);
                break;
            case JMPRIND:
                jj_consume_token(JMPRIND);
                break;
            case JMPADDR:
                jj_consume_token(JMPADDR);
                break;
            case JCONDRIN:
                jj_consume_token(JCONDRIN);
                break;
            case JCONDADDR:
                jj_consume_token(JCONDADDR);
                break;
            case LOOP:
                jj_consume_token(LOOP);
                break;
            case GRT:
                jj_consume_token(GRT);
                break;
            case GRTEQ:
                jj_consume_token(GRTEQ);
                break;
            case EQ:
                jj_consume_token(EQ);
                break;
            case NEQ:
                jj_consume_token(NEQ);
                break;
            case NOP:
                jj_consume_token(NOP);
                break;
            case CALL:
                jj_consume_token(CALL);
                break;
            case RETURN:
                jj_consume_token(RETURN);
                break;
            case COMMENT:
                jj_consume_token(COMMENT);
                break;
            case COMMA:
                jj_consume_token(COMMA);
                break;
            case REGISTER:
                jj_consume_token(REGISTER);
                break;
            case SYMBOLS:
                jj_consume_token(SYMBOLS);
                break;
            default:
                jj_la1[121] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    static private boolean jj_initialized_once = false;
    /** Generated Token Manager. */
    static public LexerGrupo3TokenManager token_source;
    static SimpleCharStream jj_input_stream;
    /** Current token. */
    static public Token token;
    /** Next token. */
    static public Token jj_nt;
    static private int jj_ntk;
    static private int jj_gen;
    static final private int[] jj_la1 = new int[122];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0x0,0xffeffffe,0xffeffffe,0x0,0xffeffffe,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0x0,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0xffeffffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0x0,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffeffffe,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0x0,0xffeffffe,0x0,0x0,0x0,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0xffeffffe,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0x0,0x0,0x0,0x0,0xffeffffe,0xffeffffe,0x0,0xfffffffe,0x0,0x1e7300,0x3c0180c0,0x40000000,0x2000c06,0x2000c28,0x81400000,0x0,0xffeffffe,};
    }
    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] {0x310,0xc3fbf,0xc3fbf,0x310,0x2081,0x300,0x300,0x300,0x300,0x320,0x300,0x300,0x2080,0x2080,0x300,0x300,0x80,0x310,0xc3fbf,0xc3fbf,0x310,0x700,0x700,0x80,0x310,0xc3fbf,0xc3fbf,0x310,0x423d9,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x710,0x700,0xc3fbf,0xc3fbf,0x710,0x300,0x300,0x300,0x300,0x300,0x710,0x700,0xc3fbf,0xc3fbf,0x710,0x610,0x300,0x710,0x700,0xc3fbf,0xc3fbf,0x710,0x710,0x700,0xc3fbf,0xc3fbf,0x710,0x700,0x3000,0x300,0x300,0x300,0x300,0x2881,0x710,0x700,0xc3fbf,0xc3fbf,0x710,0x300,0x710,0x700,0xc3fbf,0xc3fbf,0x710,0x300,0x2801,0x300,0x300,0x300,0x300,0x710,0x700,0xc3fbf,0xc3fbf,0x710,0x2081,0x710,0x700,0xc3fbf,0xc3fbf,0x710,0x300,0x310,0xc3fbf,0xc3fbf,0x310,0x300,0x80,0x710,0x700,0xc3fbf,0xc3fbf,0x710,0x613,0x1800,0x0,0x0,0x1,0x0,0x0,0x0,0x200,0xc3fbf,};
    }

    /** Constructor with InputStream. */
    public LexerGrupo3(java.io.InputStream stream) {
        this(stream, null);
    }
    /** Constructor with InputStream and supplied encoding */
    public LexerGrupo3(java.io.InputStream stream, String encoding) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source = new LexerGrupo3TokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 122; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    static public void ReInit(java.io.InputStream stream, String encoding) {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 122; i++) jj_la1[i] = -1;
    }

    /** Constructor. */
    public LexerGrupo3(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new LexerGrupo3TokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 122; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 122; i++) jj_la1[i] = -1;
    }

    /** Constructor with generated Token Manager. */
    public LexerGrupo3(LexerGrupo3TokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser. ");
            System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
            System.out.println("       during parser generation.");
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 122; i++) jj_la1[i] = -1;
    }

    /** Reinitialise. */
    public void ReInit(LexerGrupo3TokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 122; i++) jj_la1[i] = -1;
    }

    static private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }


    /** Get the next Token. */
    static final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    static private int jj_ntk() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    /** Generate ParseException. */
    static public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[52];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 122; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1<<j)) != 0) {
                        la1tokens[32+j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 52; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    static final public void enable_tracing() {
    }

    /** Disable tracing. */
    static final public void disable_tracing() {
    }

}
